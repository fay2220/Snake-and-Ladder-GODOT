#extends Control
#
#@onready var host_button = $NinePatchRect/VBoxContainer/HostButton
#@onready var join_button = $NinePatchRect/VBoxContainer/JoinButton
#@onready var name_input = $NinePatchRect/VBoxContainer/NameInput
#@onready var ip_input = $NinePatchRect/VBoxContainer/IPInput
#
#const PORT := 12345
#
#func _ready():
	#host_button.pressed.connect(start_host)
	#join_button.pressed.connect(start_join)
#
## üü¢ HOST
#func start_host():
	#var name = name_input.text.strip_edges()
#
	#if name.is_empty():
		#print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á")
		#return
	#
	#var peer = ENetMultiplayerPeer.new()
	#peer.create_server(PORT)
	#multiplayer.multiplayer_peer = peer
	#print("‚úÖ Hosting server on port %s" % PORT)
	#
	## ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö client
	#multiplayer.peer_connected.connect(_on_peer_connected)
	#multiplayer.peer_disconnected.connect(_on_peer_disconnected)
	#
	## ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ host ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô singleton (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
	#Global.my_name = name  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Global.gd ‡πÄ‡∏õ‡πá‡∏ô singleton
#
	## ‡πÇ‡∏´‡∏•‡∏î scene ‡∏´‡πâ‡∏≠‡∏á
	#get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")
	#print("Hosting Name" % Global.my_name)
	#
#
#func _on_peer_connected(id: int):
	#print("üü¢ Client connected with peer ID:", id)
#
#func _on_peer_disconnected(id: int):
	#print("üî¥ Client disconnected with peer ID:", id)
#
 #üîµ CLIENT
#func start_join():
	#var name = name_input.text.strip_edges()
	#var SERVER_IP = ip_input.text.strip_edges()
	#
	#if name.is_empty():
		#print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á")
		#return
	#if SERVER_IP.is_empty():
		#print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á")
		#return
#
	#var peer = ENetMultiplayerPeer.new()
	#peer.create_client(SERVER_IP, PORT)
	#multiplayer.multiplayer_peer = peer
	#print("üîÑ Joining server at %s:%s..." % [SERVER_IP, PORT])
#
	#multiplayer.connected_to_server.connect(_on_connected)
	#multiplayer.connection_failed.connect(_on_connection_failed)  
#
	## ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á (RoomScene)
	#Global.my_name = name 
	#get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")
#
#func _on_connected():
	#print("‚úÖ Connected to server!")
	#
	## ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤ Host
	#var id = multiplayer.get_unique_id()
	#var player_name = name_input.text.strip_edges()
	#
	#Global.my_name = player_name
	#
	## 1. ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏≤ Host ‡∏Å‡πà‡∏≠‡∏ô
	#send_name_to_host.rpc_id(1, player_name)
	#
	## 2. ‡∏£‡∏≠ 1 ‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
	#await get_tree().process_frame
	#
	## 3. ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Scene
	#get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")
	#
	#
#func _on_connection_failed():
	#print("‚ùå Failed to connect to server.")
#
## üì® RPC ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Host
#@rpc("any_peer", "call_local", "reliable")
#func send_name_to_host(name: String):
	#var sender_id = multiplayer.get_remote_sender_id()
	#print("üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å client: %s (ID: %s)" % [name, sender_id])
	#
	## ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Global ‡∏Ç‡∏≠‡∏á Host
	#if multiplayer.is_server():
		#Global.players[sender_id] = name
#
#
#func _process(delta):
	## ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á Host
	#if multiplayer.has_multiplayer_peer() and not multiplayer.is_server():
		#if multiplayer.multiplayer_peer.get_connection_status() == MultiplayerPeer.CONNECTION_DISCONNECTED:
			#handle_connection_lost()
			#set_process(false)  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _process
#
#func handle_connection_lost():
	#print("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢")
	#await get_tree().create_timer(3.0).timeout
	#get_tree().change_scene_to_file("res://Scene/menu.tscn")


extends Control

@onready var host_button = $NinePatchRect/VBoxContainer/HostButton
@onready var join_button = $NinePatchRect/VBoxContainer/JoinButton
@onready var name_input = $NinePatchRect/VBoxContainer/NameInput
@onready var ip_input = $NinePatchRect/VBoxContainer/IPInput

const PORT := 12345

func _ready():
	host_button.pressed.connect(start_host)
	join_button.pressed.connect(start_join)

# üü¢ HOST
func start_host():
	var name = name_input.text.strip_edges()

	if name.is_empty():
		print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á")
		return
	
	var peer = ENetMultiplayerPeer.new()
	peer.create_server(PORT)
	multiplayer.multiplayer_peer = peer
	print("‚úÖ Hosting server on port %s" % PORT)
	
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö client
	multiplayer.peer_connected.connect(_on_peer_connected)
	multiplayer.peer_disconnected.connect(_on_peer_disconnected)
	
	# ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ host ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô singleton
	Global.my_name = name  

	# ‡πÇ‡∏´‡∏•‡∏î scene ‡∏´‡πâ‡∏≠‡∏á
	get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")
	print("Hosting Name: %s" % Global.my_name)
	

func _on_peer_connected(id: int):
	print("üü¢ Client connected with peer ID:", id)

func _on_peer_disconnected(id: int):
	print("üî¥ Client disconnected with peer ID:", id)
	
@rpc("authority", "reliable")
func go_to_room_scene():
	get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")

# üîµ CLIENT
func start_join():
	var name = name_input.text.strip_edges()
	var SERVER_IP = ip_input.text.strip_edges()
	
	if name.is_empty():
		print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á")
		return
	if SERVER_IP.is_empty():
		print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å IP ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á")
		return

	var peer = ENetMultiplayerPeer.new()
	
	# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° signal ‡∏Å‡πà‡∏≠‡∏ô
	multiplayer.connected_to_server.connect(_on_connected)
	multiplayer.connection_failed.connect(_on_connection_failed)  
	
	# ‚úÖ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ set peer
	peer.create_client(SERVER_IP, PORT)
	multiplayer.multiplayer_peer = peer
	
	print("üîÑ Joining server at %s:%s..." % [SERVER_IP, PORT])
	
	Global.my_name = name
	
	
func _on_connected():
	print("‚úÖ Connected to server!")
	
	# ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤ Host
	var id = multiplayer.get_unique_id()
	var player_name = name_input.text.strip_edges()
	Global.my_name = player_name
	
	# ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏≤ Host ‡∏Å‡πà‡∏≠‡∏ô
	send_name_to_host.rpc_id(1, player_name)
	await get_tree().create_timer(0.3).timeout  # ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ sync ‡πÄ‡∏™‡∏£‡πá‡∏à
	get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")

func _on_connection_failed():
	print("‚ùå Failed to connect to server.")

# üì® RPC ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Host
@rpc("any_peer", "call_local", "reliable")
func send_name_to_host(name: String):
	var sender_id = multiplayer.get_remote_sender_id()
	print("üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å client: %s (ID: %s)" % [name, sender_id])
	
	if multiplayer.is_server():
		Global.players[sender_id] = name


func _process(delta):
	if multiplayer.has_multiplayer_peer() and not multiplayer.is_server():
		if multiplayer.multiplayer_peer.get_connection_status() == MultiplayerPeer.CONNECTION_DISCONNECTED:
			handle_connection_lost()
			set_process(false)

func handle_connection_lost():
	print("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢")
	await get_tree().create_timer(3.0).timeout
	get_tree().change_scene_to_file("res://Scene/menu.tscn")
