extends Control
 
@onready var player_list_label = $NinePatchRect/PlayerListContainer/PlayerListLabel # ‡∏´‡∏£‡∏∑‡∏≠ RichTextLabel
@onready var exit_button = $Exit_button
@onready var start_button = $StartButton
@onready var countdown_label = $CountdownLabel
@onready var server_closed_label = $ServerClosedLabel
@onready var PlayerListContainer = $NinePatchRect/PlayerListContainer
 
 
var is_changing_scene := false
var countdown_timer: Timer
var current_countdown := 5
 
func _ready():
	countdown_timer = Timer.new()
	add_child(countdown_timer)
	countdown_timer.timeout.connect(_on_countdown_timer_timeout)
	countdown_label.hide()
	server_closed_label.hide()
	start_button.visible = multiplayer.is_server()
	start_button.pressed.connect(_on_start_pressed)
	exit_button.pressed.connect(start_exit)
	# ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Host ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
	if multiplayer.is_server():
		Global.players[1] = Global.my_name
		update_player_list()
 
	# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° signal ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å client
	multiplayer.peer_connected.connect(_on_peer_connected)
	multiplayer.peer_disconnected.connect(_on_peer_disconnected)
 
# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á Host ‡πÅ‡∏•‡∏∞ Client)
@rpc("authority", "call_local", "reliable")
func notify_server_shutdown(message: String):
	print(message)
	server_closed_label.text = message
	server_closed_label.show()
 
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ Host ‡∏≠‡∏≠‡∏Å
func handle_host_disconnected():
	print("‚ùå ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°")
	show_server_closed_message()
	await get_tree().create_timer(3.0).timeout
	# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ó‡∏ô quit()
	get_tree().change_scene_to_file("res://Scene/menu.tscn")
 
# ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Host ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
func _exit_tree():
	if is_changing_scene:
		return
 
	if multiplayer.is_server() && multiplayer.multiplayer_peer.get_connection_status() != MultiplayerPeer.CONNECTION_DISCONNECTED:
		notify_server_shutdown.rpc("‚ö†Ô∏è ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
		await get_tree().create_timer(0.5).timeout
		multiplayer.multiplayer_peer.close()
 
func start_exit():
	if multiplayer.is_server():
		Global.players.clear()
		notify_server_shutdown.rpc("‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
		await get_tree().create_timer(3).timeout
	multiplayer.multiplayer_peer.close()
	Global.players.clear()
	get_tree().change_scene_to_file("res://Scene/menu.tscn")
 
# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô UI
func show_server_closed_message():
	var msg = "‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å..."
	server_closed_label.text = msg
	server_closed_label.show()
 
# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ client ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
func _on_peer_connected(id: int):
	print("üü¢ Player joined: ", id)
	if multiplayer.is_server():
		update_player_list_to_client.rpc_id(id, Global.players)
		request_player_name.rpc_id(id)
		go_to_room_scene.rpc_id(id)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
	else:
		Global.players[id] = Global.my_name
		print("‚ûï Client added self to Global.players")
		update_player_list()
 
@rpc("authority", "call_local", "reliable")
func go_to_room_scene():
	get_tree().change_scene_to_file("res://Scene/RoomScene.tscn")
	
# ‡πÄ‡∏°‡∏∑‡πà‡∏≠ client ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
func _on_peer_disconnected(id: int):
	print("üî¥ Player left: ", id)
	Global.players.erase(id)
	update_player_list()
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡∏¥‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà is_server())
	if id == 1:  # ‡∏ñ‡πâ‡∏≤ ID 1 (Host) ‡∏≠‡∏≠‡∏Å
		handle_host_disconnected()
	elif multiplayer.is_server():
		update_player_list_to_all_clients()
 
@rpc("any_peer", "reliable")
func send_name_to_host(name: String):
	var sender_id = multiplayer.get_remote_sender_id()
	print("üì® Received name from:", sender_id, "Name:", name)
	# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
	Global.players[sender_id] = name
	update_player_list()
 
	# Host ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
	if multiplayer.is_server():
		update_player_list_to_all_clients()
 
# Client ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ host
@rpc("any_peer", "call_local", "reliable")
func receive_player_name(id: int, name: String):
	Global.players[id] = name
	update_player_list()
	# Host ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ client ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏£‡∏≤‡∏ö
	if multiplayer.is_server():
		update_player_list_to_all_clients()
 
# Host ‡∏Ç‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å client ‡πÉ‡∏´‡∏°‡πà
@rpc("authority", "call_local", "reliable")
func request_player_name():
	# Client ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á host
	receive_player_name.rpc_id(1, multiplayer.get_unique_id(), Global.my_name)
 
# Host ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ client ‡πÉ‡∏´‡∏°‡πà
@rpc("authority", "call_local", "reliable")
func update_player_list_to_client(players_list: Dictionary):
	Global.players = players_list
	update_player_list()
 
# Host ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client
func update_player_list_to_all_clients():
	for peer_id in multiplayer.get_peers():
		update_player_list_to_client.rpc_id(peer_id, Global.players)
 
# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
func update_player_list():
	# ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤
	for child in PlayerListContainer.get_children():
		child.queue_free()
	# ‡∏™‡∏£‡πâ‡∏≤‡∏á Header
	var header = Label.new()
	header.text = "üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á %d ‡∏Ñ‡∏ô" % Global.players.size()
	header.add_theme_font_size_override("font_size", 18)
	header.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	PlayerListContainer.add_child(header)
	# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö ID
	var sorted_ids = Global.players.keys()
	sorted_ids.sort()
 
	for id in sorted_ids:
		var name = Global.players[id]
		var prefix = "üëë " if int(id) == 1 else "üßë "
		var you = " (‡∏Ñ‡∏∏‡∏ì)" if (int(id) == multiplayer.get_unique_id()) else ""
		# ‡∏™‡∏£‡πâ‡∏≤‡∏á Panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
		var panel = Panel.new()
		panel.custom_minimum_size = Vector2(0, 40)
		# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
		var bg_color = Color(0.2, 0.2, 0.2) if int(id) % 2 == 0 else Color(0.25, 0.25, 0.25)
		panel.self_modulate = bg_color
		# ‡πÄ‡∏ô‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		if int(id) == multiplayer.get_unique_id():
			panel.self_modulate = Color(0.1, 0.3, 0.1)
		# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á Label
		var label = Label.new()
		label.text = "%s%s%s" % [prefix, name, you]
		label.add_theme_color_override("font_color", Color.WHITE)
		panel.add_child(label)
		label.position = Vector2(10, 10)
		PlayerListContainer.add_child(panel)
		# ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô (optional)
		var separator = HSeparator.new()
		PlayerListContainer.add_child(separator)
 
	# ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏¥‡πâ‡∏á
	if PlayerListContainer.get_child_count() > 0:
		var last_child = PlayerListContainer.get_children()[-1]
		if last_child is HSeparator:
			last_child.queue_free()
	print("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß:", Global.players)
# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Start (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å host)
 
func _on_start_pressed():
	is_changing_scene = true
	start_countdown.rpc()
@rpc("any_peer", "call_local", "reliable")
func start_countdown():
	if multiplayer.multiplayer_peer.get_connection_status() != MultiplayerPeer.CONNECTION_CONNECTED:
		return
	countdown_label.show()
	current_countdown = 5
	countdown_label.text = "‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô %d ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ..." % current_countdown
	countdown_timer.start(1.0)
 
func _on_countdown_timer_timeout():
	current_countdown -= 1
	if current_countdown > 0:
		countdown_label.text = "‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô %d ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ..." % current_countdown
		countdown_timer.start(1.0)
	else:
		countdown_label.text = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!"
		countdown_timer.start(1.0)
		if multiplayer.is_server():
			# ‡∏ö‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Scene
			_change_to_game_scene.rpc()
 
 
@rpc("any_peer", "call_local", "reliable")
func _change_to_game_scene():
	if countdown_timer:
		countdown_timer.stop()
 
	is_changing_scene = true
	if Global.peer:
		multiplayer.multiplayer_peer = Global.peer
 
	get_tree().change_scene_to_file("res://Scene/Main.tscn")
