extends Node2D

# üåê Global Multiplayer State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏°
class_name GameGlobal

# ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π)
var my_name: String = ""

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {peer_id: player_name}
var players: Dictionary = {}
var players_point: Dictionary = {}
var players_turn: Dictionary = {}
var player_order = []

var current_turn_index: int = 0
var player_positions: Dictionary = {}  # {peer_id: position}

func copy_player_id():
	players_point = players.duplicate()
	for id in players_point.keys():
		players_point[id] = 0 

	players_turn = players.duplicate()
	for id in players_turn.keys():
		players_turn[id] = 0 
	
	# ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 key ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1
	var random_key = players_turn.keys().pick_random()
	players_turn[random_key] = 1

# ENet peer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
var peer: ENetMultiplayerPeer = null

func _init():
	print("üåç Global initialized")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Client ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
func add_client(id: int, name: String):
	# ‡∏´‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 2
	var new_id = 2
	while players.has(new_id) and new_id <= 4:
		new_id += 1
	
	if new_id > 4:
		print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏°‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ")
		return
	
	add_player(new_id, name)
	player_order.append(new_id)
	player_order.sort()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö 1,2,3,4

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
func add_player(id: int, name: String) -> void:
	players[id] = name
	player_positions[id] = 0


# ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÄ‡∏°‡∏∑‡πà‡∏≠ disconnect)
func remove_player(id: int) -> void:
	if players.has(id):
		print("üî¥ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: [%d] %s" % [id, players[id]])
		players.erase(id)
		
	if player_positions.has(id):
		player_positions.erase(id)
		
	if player_order.has(id):
		player_order.erase(id)
		


#func get_current_turn_id() -> int:
	#if player_order.size() == 0:
		#return 0
	#return player_order[current_turn_index]
#
#func advance_turn():
	#if player_order.size() == 0:
		#return
	#current_turn_index = (current_turn_index + 1) % player_order.size()
